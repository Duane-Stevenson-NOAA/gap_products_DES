{
  "hash": "4ac30995669999c7006af6e9930d9928",
  "result": {
    "markdown": "---\ntitle: Access via Oracle and R (AFSC only)\n---\n\n\n\n\n\n\nIf the user has access to the AFSC `Oracle` database, the user can use `SQL developer` to view and pull the FOSS public data directly from the `GAP_PRODUCTS` `Oracle` schema. \n\n### Connect to Oracle from R\n\nMany users will want to access the data from `Oracle` using `R`. The user will need to install the `RODBC` `R` package and ask OFIS (IT) connect `R` to `Oracle`. Then, use the following code in `R` to establish a connection from `R` to `Oracle`: \n\nHere, the user can write in their username and password directly into the `RODBC` connect function. Never save usernames or passwords in scripts that may be intentionally or unintentionally shared with others. If no username and password is entered in the function, pop-ups will appear on the screen asking for the username and password. \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(gapindex)\nchannel <- gapindex::get_connected()\n```\n:::\n\n\n\n\n### Ex. 1: Join data\n\nTo join these tables in Oracle, you may use a variant of the following code: \n\n\n\n\n::: {.cell}\n\n```{.sql .cell-code}\nSELECT \nhh.YEAR,\nhh.SRVY,                 \nhh.SURVEY,\nhh.SURVEY_DEFINITION_ID,\nhh.SURVEY_NAME,\nhh.CRUISE,\nhh.CRUISEJOIN,           \nhh.HAUL,\nhh.HAULJOIN,\nhh.STRATUM,\nhh.STATION,\nhh.VESSEL_ID,\nhh.VESSEL_NAME,          \nhh.DATE_TIME,\nhh.LATITUDE_DD_START, \nhh.LONGITUDE_DD_START, \nhh.LATITUDE_DD_END,\nhh.LONGITUDE_DD_END, \nhh.BOTTOM_TEMPERATURE_C,\nhh.SURFACE_TEMPERATURE_C,\nhh.DEPTH_M,\ncc.SPECIES_CODE,\nss.ITIS,\nss.WORMS,\nss.COMMON_NAME,     \nss.SCIENTIFIC_NAME,\nss.ID_RANK,\nCASE WHEN cc.CPUE_KGKM2 IS NULL THEN 0 ELSE cc.CPUE_KGKM2 END AS CPUE_KGKM2,\nCASE WHEN cc.CPUE_NOKM2 IS NULL THEN 0 ELSE cc.CPUE_NOKM2 END AS CPUE_NOKM2,\nCASE WHEN cc.COUNT IS NULL THEN 0 ELSE cc.COUNT END AS COUNT,\nCASE WHEN cc.WEIGHT_KG IS NULL THEN 0 ELSE cc.WEIGHT_KG END AS WEIGHT_KG,\nCASE WHEN cc.TAXON_CONFIDENCE IS NULL THEN NULL ELSE cc.TAXON_CONFIDENCE END AS TAXON_CONFIDENCE,\nhh.AREA_SWEPT_KM2,       \nhh.DISTANCE_FISHED_KM,\nhh.DURATION_HR,          \nhh.NET_WIDTH_M,\nhh.NET_HEIGHT_M,\nhh.PERFORMANCE \nFROM GAP_PRODUCTS.FOSS_SURVEY_SPECIES sv\nFULL OUTER JOIN GAP_PRODUCTS.FOSS_SPECIES ss\nON sv.SPECIES_CODE = ss.SPECIES_CODE\nFULL OUTER JOIN GAP_PRODUCTS.FOSS_HAUL hh\nON sv.SURVEY_DEFINITION_ID = hh.SURVEY_DEFINITION_ID\nFULL OUTER JOIN GAP_PRODUCTS.FOSS_CATCH cc\nON sv.SPECIES_CODE = cc.SPECIES_CODE\nAND hh.HAULJOIN = cc.HAULJOIN\n```\n:::\n\n\n\n\n### Ex. 2: Subset data\n\nOnce connected, pull and save (if needed) the tables into the `R` environment. \n\nTo pull a small subset of the data (especially since files like `GAP_PRODUCTS.FOSS_CPUE_ZEROFILLED` are so big), use a variation of the following code. Here, we are pulling EBS Pacific cod from 2010 - 2021: \n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pull data\na <- RODBC::sqlQuery(\nchannel = channel, \nquery = \n\"SELECT * FROM GAP_PRODUCTS.FOSS_CATCH cc\nJOIN GAP_PRODUCTS.FOSS_HAUL hh\nON cc.HAULJOIN = hh.HAULJOIN\nWHERE SRVY = 'EBS' \nAND SPECIES_CODE = 21720 -- 'Pacific cod' \nAND YEAR >= 2010 \nAND YEAR < 2021\")\n# Save table to local directory\nwrite.csv(x = a, file = \"ebs_pcod_2010-2020.csv\")\n```\n:::\n\n::: {.cell}\n\n:::\n",
    "supporting": [
      "foss-oracle-r_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}