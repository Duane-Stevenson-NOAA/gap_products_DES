{
  "hash": "87e97987bc5396b153e6f4341a7e611a",
  "result": {
    "markdown": "---\ntitle: Access public data using the API and Python\n---\n\n\n\n\n\n### {afscgap} Library Installation\n\n> author: Sam Pottinger (sam.pottinger@berkeley.edu; GitHub::sampottinger)\n> date: May 13, 2023\n\nThe third-party `afscgap` Python package interfaces with FOSS to access AFSC GAP data. It can be installed via pip:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#The reticulate package provides a comprehensive set of tools for interoperability between Python and R. \nlibrary(reticulate)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\npip install afscgap\npip install git+https://github.com/SchmidtDSE/afscgap.git@main\n```\n:::\n\n\n\nFor more information on installation and deployment, see the [library documentation](https://pyafscgap.org).\n\n### Basic query\n\nThis first example queries for Pacific glass shrimp (*Pasiphaea pacifica*) in the Gulf of Alaska in 2021. The library will automatically generate HTTP queries, converting from Python types to [ORDS](https://www.oracle.com/database/technologies/appdev/rest.html) query syntax.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport afscgap\n\nquery = afscgap.Query()\nquery.filter_year(eq=2021)\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\n\nresults = query.execute()\n```\n:::\n\n\n\nThe `results` variable in this example is an iterator that will automatically perform pagination behind the scenes.\n\n### Iterating with a for loop\n\nThe easiest way to interact with results is a simple for loop. This next example determines the frequency of different catch per unit effort where Pacific glass shrimp were reported:\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport afscgap\n\n# Mapping from CPUE to count\ncount_by_cpue = {}\n\n# Build query\nquery = afscgap.Query()\nquery.filter_year(eq=2021)\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\nresults = query.execute()\n\n# Iterate through results and count\nfor record in results:\n  cpue = record.get_cpue_weight(units='kg/ha')\n  cpue_rounded = round(cpue)\n  count = count_by_cpue.get(cpue_rounded, 0) + 1\n  count_by_cpue[cpue_rounded] = count\n\n# Print the result\nprint(count_by_cpue)\n```\n:::\n\n\n\nNote that, in this example, only records with Pacific glass shrimp are included (\"presence-only\" data). See zero catch inference below. In other words, it reports on CPUE only for hauls in which Pacific glass shrimp were recorded, excluding some hauls like those in which Pacific glass shrimp were not found at all.\n\n### Iterating with functional programming\n\nA for loop is not the only option for iterating through results. List comprehensions and other functional programming methods can be used as well.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport statistics\n\nimport afscgap\n\n# Build query\nquery = afscgap.Query()\nquery.filter_year(eq=2021)\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\nresults = query.execute()\n\n# Get temperatures in Celsius\ntemperatures = [record.get_bottom_temperature(units='c') for record in results]\n\n# Take the median\nprint(statistics.median(temperatures))\n```\n:::\n\n\n\nThis example reports the median temperature in Celcius for when Pacific glass shrimp was reported.\n\n### Load into Pandas\n\nThe results from the `afscgap` package are serializable and can be loaded into other tools like [Pandas](https://pandas.pydata.org/). This example loads Pacific glass shrimp from 2021 Gulf of Alaska into a data frame.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport pandas\n\nimport afscgap\n\nquery = afscgap.Query()\nquery.filter_year(eq=2021)\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\nresults = query.execute()\n\npandas.DataFrame(results.to_dicts())\n```\n:::\n\n\n\nSpecifically, `to_dicts` provides an iterator over a dictionary form of the data that can be read into tools like Pandas.\n\n### Advanced filtering\n\nQueries so far have focused on filters requiring equality but range queries can be built as well.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport afscgap\n\n# Build query\nquery = afscgap.Query()\nquery.filter_year(min_val=2015, max_val=2019)   # Note min/max_val\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\nresults = query.execute()\n\n# Sum weight\nweights = map(lambda x: x.get_weight(units='kg'), results)\ntotal_weight = sum(weights)\nprint(total_weight)\n```\n:::\n\n\n\nThis example queries for Pacific glass shrimp data between 2015 and 2019, summing the total weight caught. Note that most users will likely take advantage of built-in Python to [ORDS](https://www.oracle.com/database/technologies/appdev/rest.html) query generation which dictates how the library communicates with the API service. However, users can provide raw ORDS queries as well using [manual filtering](https://pyafscgap.org/devdocs/afscgap.html#manual-filtering).\n\n### Zero-catch inference\n\nUntil this point, these examples use presence-only data. However, the `afscgap` package can infer negative or \"zero catch\" records as well.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nimport afscgap\n\n# Mapping from CPUE to count\ncount_by_cpue = {}\n\n# Build query\nquery = afscgap.Query()\nquery.filter_year(eq=2021)\nquery.filter_srvy(eq='GOA')\nquery.filter_scientific_name(eq='Pasiphaea pacifica')\nquery.set_presence_only(False)  # Added to earlier example\nresults = query.execute()\n\n# Iterate through results and count\nfor record in results:\n  cpue = record.get_cpue_weight(units='kg/ha')\n  cpue_rounded = round(cpue)\n  count = count_by_cpue.get(cpue_rounded, 0) + 1\n  count_by_cpue[cpue_rounded] = count\n\n# Print the result\nprint(count_by_cpue)\n```\n:::\n\n\n\nThis example revisits the earlier snippet for CPUE counts but `set_presence_only(False)` directs the library to look at additional data on hauls, determining which hauls did not have Pacific glass shrimp. This lets the library return records for hauls in which Pacific glass shrimp were not found. This can be seen in differences in counts reported:\n\n| Rounded CPUE | Count with set_presence_only(True) | Count with set_presence_only(False) |\n|--------------|------------------------------------|-------------------------------------|\n| 0 kg/ha      | 44                                 | 521                                 |\n| 1 kg/ha      | 7                                  | 7                                   |\n| 2 kg/ha      | 1                                  | 1                                   |\n\nPut simply, while the earlier example showed CPUE counts for hauls in which Pacific glass shrimp were seen, this revised example reports for all hauls in the Gulf of Alaska in 2021.\n\n### More information\n\nPlease see the [API documentation](https://pyafscgap.org/devdocs/afscgap.html) for the Python library for additional details.\n\n",
    "supporting": [
      "foss-api-py_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {
      "knitr": [
        "{\"type\":\"list\",\"attributes\":{},\"value\":[]}"
      ]
    },
    "preserve": null,
    "postProcess": false
  }
}