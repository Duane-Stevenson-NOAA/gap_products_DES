---
title: Access via Oracle and R (AFSC only)
---

```{r setup, include=FALSE}
#| file: functions.R
```

If the user has access to the AFSC `Oracle` database, the user can use `SQL developer` to view and pull the FOSS public data directly from the `GAP_PRODUCTS` `Oracle` schema. 

### Connect to Oracle from R

Many users will want to access the data from `Oracle` using `R`. The user will need to install the `RODBC` `R` package and ask OFIS (IT) connect `R` to `Oracle`. Then, use the following code in `R` to establish a connection from `R` to `Oracle`: 

Here, the user can write in their username and password directly into the `RODBC` connect function. Never save usernames or passwords in scripts that may be intentionally or unintentionally shared with others. If no username and password is entered in the function, pop-ups will appear on the screen asking for the username and password. 

```{r oracle-connect-2, echo = TRUE, eval = FALSE}
 #' Define RODBC connection to ORACLE
 #'
 #' @param schema default = 'AFSC'. 
 #'
 #' @return oracle channel connection
 #' @export
 #'
 #' @examples
 #' # Not run
 #' # channel <- oracle_connect()
oracle_connect <- function(
    schema='AFSC', 
    username = NULL, 
    passowrd = NULL){(echo=FALSE)
  
  library("RODBC")
  library("getPass")
  if (is.null(username)) {
    username <- getPass(msg = "Enter your ORACLE Username: ")
  }
  if (is.null(password)) {
    password <- getPass(msg = "Enter your ORACLE Password: ")
  }
  channel  <- RODBC::odbcConnect(
    paste(schema),
    paste(username),
    paste(password), 
    believeNRows=FALSE)
  return(channel)
}

channel <- oracle_connect()
```

### Ex. 1: Join data

To join these tables in Oracle, you may use a variant of the following code: 

```{sql, eval = FALSE, echo = TRUE}
-- old
-- SELECT * FROM GAP_PRODUCTS.JOIN_FOSS_CPUE_HAUL
-- FULL JOIN GAP_PRODUCTS.JOIN_FOSS_CPUE_CATCH
-- ON GAP_PRODUCTS.JOIN_FOSS_CPUE_HAUL.HAULJOIN = GAP_PRODUCTS.JOIN_FOSS_CPUE_CATCH.HAULJOIN;
-- When zero-filled data are available on 

-- new
SELECT DISTINCT 
hh.YEAR,
hh.SRVY,                 
hh.SURVEY,
hh.SURVEY_DEFINITION_ID,
hh.SURVEY_NAME,
hh.CRUISE,
hh.CRUISEJOIN,           
hh.HAUL,
hh.HAULJOIN,
hh.STRATUM,
hh.STATION,
hh.VESSEL_ID,
hh.VESSEL_NAME,          
hh.DATE_TIME,
hh.LATITUDE_DD_START, 
hh.LONGITUDE_DD_START, 
hh.LATITUDE_DD_END,
hh.LONGITUDE_DD_END, 
hh.BOTTOM_TEMPERATURE_C,
hh.SURFACE_TEMPERATURE_C,
hh.DEPTH_M,
cc.SPECIES_CODE,
ss.ITIS,
ss.WORMS,
ss.COMMON_NAME,     
ss.SCIENTIFIC_NAME,
ss.ID_RANK,
cc.TAXON_CONFIDENCE,
cc.WEIGHT_KG,
cc.COUNT,
cc.CPUE_KGKM2,
cc.CPUE_NOKM2,
hh.AREA_SWEPT_KM2,       
hh.DISTANCE_FISHED_KM,
hh.DURATION_HR,          
hh.NET_WIDTH_M,
hh.NET_HEIGHT_M,
hh.PERFORMANCE 
FROM GAP_PRODUCTS.FOSS_CATCH cc
LEFT JOIN GAP_PRODUCTS.FOSS_HAUL hh
ON cc.HAULJOIN = hh.HAULJOIN
FULL JOIN GAP_PRODUCTS.FOSS_SPECIES_TEST ss
ON cc.SPECIES_CODE = ss.SPECIES_CODE
```

### Ex. 2: Subset data

Once connected, pull and save (if needed) the tables into the `R` environment. 

To pull a small subset of the data (especially since files like `GAP_PRODUCTS.FOSS_CPUE_ZEROFILLED` are so big), use a variation of the following code. Here, we are pulling EBS Pacific cod from 2010 - 2021: 

```{r oracle-data-pull-subset, echo = TRUE, eval = FALSE}
# Pull data
a <- RODBC::sqlQuery(
channel = channel, 
query = 
"SELECT * FROM GAP_PRODUCTS.FOSS_CATCH cc
JOIN GAP_PRODUCTS.FOSS_HAUL hh
ON cc.HAULJOIN = hh.HAULJOIN
WHERE SRVY = 'EBS' 
AND SPECIES_CODE = 21720 -- 'Pacific cod' 
AND YEAR >= 2010 
AND YEAR < 2021")
# Save table to local directory
write.csv(x = a, file = "ebs_pcod_2010-2020.csv")
```

```{r rodbc-close}
RODBC::odbcCloseAll()
```

